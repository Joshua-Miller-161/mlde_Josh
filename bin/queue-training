#!/usr/bin/env python
# setup jobs for training a model

import os
import subprocess
import sys

import typer

app = typer.Typer()

def train_cmd(sde, dataset, workdir, config_overrides=list):
  train_basecmd = ["python", f"main.py"]

  train_opts = {
    "--config": f"configs/{sde}/xarray_cncsnpp_continuous.py",
    "--workdir": workdir,
    "--mode": "train"
  }

  return train_basecmd + [arg for item in train_opts.items() for arg in item] + [f"--config.data.dataset_name={dataset}"]+config_overrides

def queue_cmd(training_duration):
  queue_basecmd = ["lbatch"]

  queue_opts = {
    "-g": "1",
    "-m": "16",
    "-q": "gpu,cnu",
    "-t": str(training_duration),
    "--condaenv": "cuda-downscaling",
  }

  return queue_basecmd + [arg for item in queue_opts.items() for arg in item]


@app.command(
    context_settings={
        "allow_extra_args": True,
        "ignore_unknown_options": True,
    }
)
def main(ctx: typer.Context, model_run_id: str, cpm_dataset: str, sde: str):
    # Add any other config on the commandline for training
    # --config.data.input_transform_key=spatial

    training_duration=36

    workdir=f"{os.getenv('DERIVED_DATA')}/workdirs/score-sde/{sde}/xarray_cncsnpp_continuous/{model_run_id}"

    full_cmd = queue_cmd(training_duration) + ["--"] + train_cmd(sde, cpm_dataset, workdir, ctx.args)
    print(" ".join(full_cmd).strip(), file=sys.stderr)
    output = subprocess.run(full_cmd, capture_output=True)
    print(output.stderr.decode("utf8").strip(), file=sys.stderr)
    print(output.stdout.decode("utf8").strip())

if __name__ == "__main__":
    app()